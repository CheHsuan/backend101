// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package phonebook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PhonebookClient is the client API for Phonebook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhonebookClient interface {
	CreatePhoneRecord(ctx context.Context, in *CreatePhoneRecordRequest, opts ...grpc.CallOption) (*CreatePhoneRecordResponse, error)
	QueryPhoneRecord(ctx context.Context, in *QueryPhoneRecordRequest, opts ...grpc.CallOption) (*QueryPhoneRecordResponse, error)
}

type phonebookClient struct {
	cc grpc.ClientConnInterface
}

func NewPhonebookClient(cc grpc.ClientConnInterface) PhonebookClient {
	return &phonebookClient{cc}
}

func (c *phonebookClient) CreatePhoneRecord(ctx context.Context, in *CreatePhoneRecordRequest, opts ...grpc.CallOption) (*CreatePhoneRecordResponse, error) {
	out := new(CreatePhoneRecordResponse)
	err := c.cc.Invoke(ctx, "/phonebook.Phonebook/CreatePhoneRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonebookClient) QueryPhoneRecord(ctx context.Context, in *QueryPhoneRecordRequest, opts ...grpc.CallOption) (*QueryPhoneRecordResponse, error) {
	out := new(QueryPhoneRecordResponse)
	err := c.cc.Invoke(ctx, "/phonebook.Phonebook/QueryPhoneRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhonebookServer is the server API for Phonebook service.
// All implementations must embed UnimplementedPhonebookServer
// for forward compatibility
type PhonebookServer interface {
	CreatePhoneRecord(context.Context, *CreatePhoneRecordRequest) (*CreatePhoneRecordResponse, error)
	QueryPhoneRecord(context.Context, *QueryPhoneRecordRequest) (*QueryPhoneRecordResponse, error)
	mustEmbedUnimplementedPhonebookServer()
}

// UnimplementedPhonebookServer must be embedded to have forward compatible implementations.
type UnimplementedPhonebookServer struct {
}

func (UnimplementedPhonebookServer) CreatePhoneRecord(context.Context, *CreatePhoneRecordRequest) (*CreatePhoneRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoneRecord not implemented")
}
func (UnimplementedPhonebookServer) QueryPhoneRecord(context.Context, *QueryPhoneRecordRequest) (*QueryPhoneRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPhoneRecord not implemented")
}
func (UnimplementedPhonebookServer) mustEmbedUnimplementedPhonebookServer() {}

// UnsafePhonebookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhonebookServer will
// result in compilation errors.
type UnsafePhonebookServer interface {
	mustEmbedUnimplementedPhonebookServer()
}

func RegisterPhonebookServer(s grpc.ServiceRegistrar, srv PhonebookServer) {
	s.RegisterService(&Phonebook_ServiceDesc, srv)
}

func _Phonebook_CreatePhoneRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhoneRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonebookServer).CreatePhoneRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phonebook.Phonebook/CreatePhoneRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonebookServer).CreatePhoneRecord(ctx, req.(*CreatePhoneRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phonebook_QueryPhoneRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPhoneRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonebookServer).QueryPhoneRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phonebook.Phonebook/QueryPhoneRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonebookServer).QueryPhoneRecord(ctx, req.(*QueryPhoneRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Phonebook_ServiceDesc is the grpc.ServiceDesc for Phonebook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Phonebook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "phonebook.Phonebook",
	HandlerType: (*PhonebookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePhoneRecord",
			Handler:    _Phonebook_CreatePhoneRecord_Handler,
		},
		{
			MethodName: "QueryPhoneRecord",
			Handler:    _Phonebook_QueryPhoneRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phonebook/service.proto",
}
